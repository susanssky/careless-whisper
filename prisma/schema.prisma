// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// model Transcript {
//     id        Int        @id @default(autoincrement())
//     sentences Sentence[]
//     createdAt DateTime   @default(now())
//     updatedAt DateTime   @updatedAt
//     transcript      Transcript?      @relation(fields: [transcriptId], references: [id])
//     transcriptId    Int?       @unique
// }

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    transcriptId String?

    @@unique([provider, providerAccountId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    role          Role?        @default(Trainee)
    accounts      Account[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    transcripts   Transcript[]
    sessions      Session[]
}

enum Role {
    Trainee
    Mentor
}

model Sentence {
    id           Int        @id @default(autoincrement())
    lineNumber   String
    startTime    String
    endTime      String
    content      String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
    transcriptId Int
}

model Transcript {
    id                Int        @id @default(autoincrement())
    cohort            Cohort     @relation(fields: [cohortId], references: [id])
    syllabus          Syllabus   @relation(fields: [syllabusId], references: [id])
    syllabusId        Int
    sessionName       String?
    leaderName        String?
    originalVideoLink String?
    keywords          String?
    duration          Int?       @default(0)
    viewsNum          Int?       @default(0)
    votesNum          Int?       @default(0)
    user              User       @relation(fields: [userId], references: [id])
    userId            String     @map("uploaderId")
    cohortId          Int
    sentences         Sentence[]
    summary           String?
    votes             Vote[]
    feedbacks         Feedback[]
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
}

model Cohort {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    transcripts Transcript[]
}

model Syllabus {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    link        String?      @unique
    transcripts Transcript[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SearchQuery {
    id        Int      @id @default(autoincrement())
    query     String
    createdAt DateTime @default(now())
}

model Vote {
    id           Int        @id @default(autoincrement())
    userId       String
    transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
    transcriptId Int
    createdAt    DateTime   @default(now())

    @@unique([userId, transcriptId])
}

model Feedback {
    id           Int        @id @default(autoincrement())
    transcriptId Int
    userId       String
    text         String
    createdAt    DateTime   @default(now())
    transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
}
