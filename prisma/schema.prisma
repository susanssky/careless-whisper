// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Sentence {
    id              Int           @id @default(autoincrement())
    lineNumber      String
    startTime       String
    endTime         String
    content         String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    transcription   Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)
    transcriptionId Int
}

model Transcription {
    id        Int        @id @default(autoincrement())
    sentences Sentence[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    post      Post?      @relation(fields: [postId], references: [id])
    postId    Int?       @unique
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId            String?

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role?     @default(Trainee)
    accounts      Account[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    posts         Post[]
    Session       Session[]
}

enum Role {
    Trainee
    Mentor
}

model Post {
    id                Int            @id @default(autoincrement())
    cohort            Cohort         @relation(fields: [cohortId], references: [id])
    syllabus          Syllabus       @relation(fields: [syllabusId], references: [id])
    syllabusId        Int
    originalVideoLink String?
    sessionName       String?
    leaderName        String?
    keywords          String?
    duration          Int?           @default(0)
    viewsNum          Int?           @default(0)
    votesNum          Int?           @default(0)
    user              User           @relation(fields: [userId], references: [id])
    userId            String         @map("uploaderId")
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    cohortId          Int
    transcription     Transcription?
    summary           String?
     votes            Vote[]
}

model Cohort {
    id   Int    @id @default(autoincrement())
    name String @unique
    post Post[]
}

model Syllabus {
    id   Int     @id @default(autoincrement())
    name String  @unique
    link String? @unique
    post Post[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SearchQuery {
    id        Int      @id @default(autoincrement())
    query     String
    createdAt DateTime @default(now())
}

model Vote{
     id        Int      @id @default(autoincrement())
     userId String
     post     Post @relation(fields: [postId], references: [id])
     postId Int
     createdAt DateTime @default(now())
     @@unique([userId,postId])

}
